#!/bin/bash

# Script de setup automatis√© pour Coko - Optimis√© pour l'Afrique
# Usage: ./scripts/setup.sh [dev|prod]

set -e

ENVIRONMENT=${1:-dev}
BACKEND_DIR="backend"
SCRIPTS_DIR="scripts"

echo "üöÄ Configuration de Coko pour l'environnement: $ENVIRONMENT"
echo "üìç Optimisations sp√©cifiques pour l'Afrique de l'Ouest activ√©es"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    print_status "V√©rification des pr√©requis..."
    
    # V√©rifier Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Node.js (pour PWA et optimisations front)
    if ! command -v node &> /dev/null; then
        print_warning "Node.js non trouv√© - installation recommand√©e pour PWA"
    fi
    
    # V√©rifier Git
    if ! command -v git &> /dev/null; then
        print_error "Git n'est pas install√©"
        exit 1
    fi
    
    print_success "Pr√©requis valid√©s"
}

# Installation des d√©pendances Python
install_python_deps() {
    print_status "Installation des d√©pendances Python..."
    
    cd $BACKEND_DIR
    
    # Cr√©er environnement virtuel si n√©cessaire
    if [ ! -d "venv" ]; then
        print_status "Cr√©ation de l'environnement virtuel..."
        python3 -m venv venv
    fi
    
    # Activer l'environnement virtuel
    source venv/bin/activate
    
    # Mise √† jour pip
    pip install --upgrade pip
    
    # Installation selon l'environnement
    if [ "$ENVIRONMENT" = "dev" ]; then
        print_status "Installation des d√©pendances de d√©veloppement..."
        python setup_dependencies.py minimal
    else
        print_status "Installation des d√©pendances compl√®tes..."
        python setup_dependencies.py full
    fi
    
    cd ..
    print_success "D√©pendances Python install√©es"
}

# Configuration de la base de donn√©es
setup_database() {
    print_status "Configuration de la base de donn√©es..."
    
    cd $BACKEND_DIR
    source venv/bin/activate
    
    if [ "$ENVIRONMENT" = "dev" ]; then
        # Utiliser SQLite pour le d√©veloppement
        export DJANGO_SETTINGS_MODULE=coko.settings_local
        print_status "Utilisation de SQLite pour le d√©veloppement"
    else
        # PostgreSQL pour la production
        export DJANGO_SETTINGS_MODULE=coko.settings
        print_status "Configuration PostgreSQL pour la production"
    fi
    
    # Migrations
    print_status "Application des migrations..."
    python manage.py migrate
    python manage.py migrate --database=auth_db
    python manage.py migrate --database=catalog_db
    python manage.py migrate --database=reading_db
    
    cd ..
    print_success "Base de donn√©es configur√©e"
}

# Configuration des fichiers statiques
setup_static_files() {
    print_status "Configuration des fichiers statiques..."
    
    cd $BACKEND_DIR
    source venv/bin/activate
    
    # Collecte des fichiers statiques
    python manage.py collectstatic --noinput
    
    cd ..
    print_success "Fichiers statiques configur√©s"
}

# Configuration PWA et optimisations africaines
setup_african_optimizations() {
    print_status "Configuration des optimisations africaines..."
    
    # Cr√©er les r√©pertoires n√©cessaires
    mkdir -p $BACKEND_DIR/static/pwa
    mkdir -p $BACKEND_DIR/static/compressed
    mkdir -p $BACKEND_DIR/logs
    
    # Configuration du cache offline
    if [ "$ENVIRONMENT" = "prod" ]; then
        print_status "Configuration du cache pour r√©seaux lents..."
        # Ici on pourrait ajouter la configuration de compression, etc.
    fi
    
    print_success "Optimisations africaines configur√©es"
}

# Cr√©ation du superutilisateur
create_superuser() {
    print_status "Cr√©ation du superutilisateur..."
    
    cd $BACKEND_DIR
    source venv/bin/activate
    
    if [ "$ENVIRONMENT" = "dev" ]; then
        python create_superuser.py
    else
        print_warning "Cr√©ation manuelle du superutilisateur requise en production"
        echo "Utilisez: python manage.py createsuperuser"
    fi
    
    cd ..
}

# Tests de performance africains
run_african_performance_tests() {
    if [ "$ENVIRONMENT" = "dev" ]; then
        print_status "Tests de performance pour conditions africaines..."
        
        cd $BACKEND_DIR
        source venv/bin/activate
        
        # Simulation de tests de latence
        print_status "Test de temps de r√©ponse (objectif: <500ms)..."
        # Ici on pourrait ajouter des tests r√©els
        
        print_success "Tests de performance termin√©s"
        cd ..
    fi
}

# Fonction principale
main() {
    echo "==========================================="
    echo "üåç Setup Coko - Plateforme Africaine üìö"
    echo "==========================================="
    
    check_prerequisites
    install_python_deps
    setup_database
    setup_static_files
    setup_african_optimizations
    create_superuser
    run_african_performance_tests
    
    echo "==========================================="
    print_success "üéâ Setup termin√© avec succ√®s!"
    echo "==========================================="
    
    if [ "$ENVIRONMENT" = "dev" ]; then
        echo "Pour d√©marrer le serveur de d√©veloppement:"
        echo "cd backend && source venv/bin/activate"
        echo "python start_dev.py"
        echo ""
        echo "Ou directement:"
        echo "./scripts/start-dev.sh"
    else
        echo "Pour d√©marrer en production:"
        echo "./scripts/deploy.sh"
    fi
    
    echo ""
    echo "üìä Monitoring disponible sur: http://localhost:8000/health/"
    echo "üåç Optimis√© pour l'Afrique de l'Ouest üöÄ"
}

# Ex√©cution
main "$@"