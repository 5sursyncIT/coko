#!/usr/bin/env python3
"""Script de configuration des d√©pendances pour l'application Coko"""

import os
import sys
import subprocess
import argparse

def run_command(command, description):
    """Ex√©cute une commande et g√®re les erreurs"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - √âchec")
        print(f"Erreur: {e.stderr}")
        return False

def install_minimal_dependencies():
    """Installe les d√©pendances minimales (core requirements seulement)"""
    print("üì¶ Installation des d√©pendances minimales...")
    success = run_command(
        "pip install -r requirements.txt",
        "Installation des d√©pendances de base"
    )
    if success:
        print("üí° Note: Les d√©pendances ML/AI sont comment√©es. D√©commentez-les dans requirements.txt si n√©cessaire.")
    return success

def install_ml_dependencies():
    """Active les d√©pendances ML/AI en les d√©commentant dans requirements.txt"""
    print("ü§ñ Activation des d√©pendances ML/AI...")
    
    try:
        # Lire requirements.txt
        with open('requirements.txt', 'r') as f:
            content = f.read()
        
        # D√©commenter les packages ML/AI
        ml_packages = [
            'scikit-learn==1.3.2',
            'numpy==1.26.2', 
            'pandas==2.1.4',
            'scipy==1.11.4',
            'transformers==4.36.0',
            'nltk==3.8.1',
            'spacy==3.7.2',
            'langdetect==1.0.9'
        ]
        
        for package in ml_packages:
            content = content.replace(f'# {package}', package)
        
        # R√©√©crire requirements.txt
        with open('requirements.txt', 'w') as f:
            f.write(content)
        
        # Installer les d√©pendances
        return run_command(
            "pip install -r requirements.txt",
            "Installation des d√©pendances ML/AI"
        )
    except Exception as e:
        print(f"‚ùå Erreur lors de l'activation des d√©pendances ML/AI: {e}")
        return False

def install_full_dependencies():
    """Installe toutes les d√©pendances (d√©commente tout)"""
    print("üì¶ Installation de toutes les d√©pendances...")
    
    try:
        # Lire requirements.txt
        with open('requirements.txt', 'r') as f:
            content = f.read()
        
        # D√©commenter tous les packages optionnels
        all_packages = [
            'scikit-learn==1.3.2',
            'numpy==1.26.2',
            'pandas==2.1.4', 
            'scipy==1.11.4',
            'tensorflow==2.15.0',
            'torch==2.1.2',
            'transformers==4.36.0',
            'nltk==3.8.1',
            'spacy==3.7.2',
            'langdetect==1.0.9',
            'opencv-python==4.8.1.78'
        ]
        
        for package in all_packages:
            content = content.replace(f'# {package}', package)
        
        # R√©√©crire requirements.txt
        with open('requirements.txt', 'w') as f:
            f.write(content)
        
        # Installer les d√©pendances
        return run_command(
            "pip install -r requirements.txt",
            "Installation compl√®te des d√©pendances"
        )
    except Exception as e:
        print(f"‚ùå Erreur lors de l'installation compl√®te: {e}")
        return False

def setup_database():
    """Configure la base de donn√©es"""
    print("\nüóÑÔ∏è Configuration de la base de donn√©es...")
    
    commands = [
        ("python manage.py makemigrations", "Cr√©ation des migrations"),
        ("python manage.py migrate --database=default", "Migration base par d√©faut"),
        ("python manage.py migrate --database=auth_db", "Migration base auth"),
        ("python manage.py migrate --database=catalog_db", "Migration base catalog"),
        ("python manage.py migrate --database=reading_db", "Migration base reading"),
    ]
    
    for command, description in commands:
        if not run_command(command, description):
            return False
    
    return True

def collect_static():
    """Collecte les fichiers statiques"""
    return run_command(
        "python manage.py collectstatic --noinput",
        "Collecte des fichiers statiques"
    )

def check_environment():
    """V√©rifie l'environnement"""
    print("üîç V√©rification de l'environnement...")
    
    # V√©rifier Python
    python_version = sys.version_info
    if python_version < (3, 8):
        print(f"‚ùå Python {python_version.major}.{python_version.minor} d√©tect√©. Python 3.8+ requis.")
        return False
    
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # V√©rifier pip
    try:
        import pip
        print(f"‚úÖ pip disponible")
    except ImportError:
        print("‚ùå pip non disponible")
        return False
    
    return True

def main():
    parser = argparse.ArgumentParser(description="Configuration des d√©pendances Coko")
    parser.add_argument(
        '--mode',
        choices=['minimal', 'ml', 'full'],
        default='minimal',
        help='Mode d\'installation: minimal (sans ML), ml (avec ML), full (tout)'
    )
    parser.add_argument(
        '--skip-db',
        action='store_true',
        help='Ignorer la configuration de la base de donn√©es'
    )
    parser.add_argument(
        '--skip-static',
        action='store_true',
        help='Ignorer la collecte des fichiers statiques'
    )
    
    args = parser.parse_args()
    
    print("üöÄ Configuration de l'application Coko")
    print(f"Mode: {args.mode}")
    
    # V√©rification de l'environnement
    if not check_environment():
        sys.exit(1)
    
    # Installation des d√©pendances
    success = False
    if args.mode == 'minimal':
        success = install_minimal_dependencies()
    elif args.mode == 'ml':
        success = install_minimal_dependencies() and install_ml_dependencies()
    elif args.mode == 'full':
        success = install_full_dependencies()
    
    if not success:
        print("‚ùå √âchec de l'installation des d√©pendances")
        sys.exit(1)
    
    # Configuration de la base de donn√©es
    if not args.skip_db:
        if not setup_database():
            print("‚ùå √âchec de la configuration de la base de donn√©es")
            sys.exit(1)
    
    # Collecte des fichiers statiques
    if not args.skip_static:
        if not collect_static():
            print("‚ö†Ô∏è √âchec de la collecte des fichiers statiques (non critique)")
    
    print("\nüéâ Configuration termin√©e avec succ√®s!")
    print("\nüìã Prochaines √©tapes:")
    print("   1. Configurer les variables d'environnement (.env)")
    print("   2. Cr√©er un superutilisateur: python manage.py createsuperuser")
    print("   3. D√©marrer le serveur: python manage.py runserver")
    
    if args.mode == 'minimal':
        print("\nüí° Pour activer les fonctionnalit√©s ML/AI:")
        print("   python setup_dependencies.py --mode ml")

if __name__ == '__main__':
    main()