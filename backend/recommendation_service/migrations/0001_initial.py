# Generated by Django 4.2.7 on 2025-07-24 21:50

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Recommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "book_uuid",
                    models.UUIDField(help_text="UUID du livre dans catalog_service"),
                ),
                (
                    "book_title",
                    models.CharField(
                        help_text="Titre du livre (cache pour performance)",
                        max_length=500,
                    ),
                ),
                (
                    "score",
                    models.FloatField(
                        help_text="Score de recommandation (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "position",
                    models.PositiveIntegerField(
                        help_text="Position dans la liste de recommandations"
                    ),
                ),
                (
                    "reasons",
                    models.JSONField(
                        default=list, help_text="Raisons de la recommandation"
                    ),
                ),
                (
                    "explanation",
                    models.TextField(
                        blank=True,
                        help_text="Explication textuelle de la recommandation",
                    ),
                ),
                ("viewed", models.BooleanField(default=False)),
                ("clicked", models.BooleanField(default=False)),
                ("converted", models.BooleanField(default=False)),
                ("viewed_at", models.DateTimeField(blank=True, null=True)),
                ("clicked_at", models.DateTimeField(blank=True, null=True)),
                ("converted_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Recommandation",
                "verbose_name_plural": "Recommandations",
                "db_table": "recommendations",
                "ordering": ["position"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preferred_genres",
                    models.JSONField(
                        default=list, help_text="Liste des genres préférés"
                    ),
                ),
                (
                    "preferred_authors",
                    models.JSONField(
                        default=list, help_text="Liste des auteurs préférés"
                    ),
                ),
                (
                    "preferred_languages",
                    models.JSONField(
                        default=list, help_text="Langues préférées pour la lecture"
                    ),
                ),
                (
                    "reading_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                            ("expert", "Expert"),
                        ],
                        default="intermediate",
                        max_length=20,
                    ),
                ),
                (
                    "reading_frequency",
                    models.CharField(
                        choices=[
                            ("daily", "Quotidien"),
                            ("weekly", "Hebdomadaire"),
                            ("monthly", "Mensuel"),
                            ("occasional", "Occasionnel"),
                        ],
                        default="weekly",
                        max_length=20,
                    ),
                ),
                (
                    "average_reading_time",
                    models.DurationField(
                        default=datetime.timedelta(seconds=1800),
                        help_text="Temps de lecture moyen par session",
                    ),
                ),
                (
                    "preferred_content_types",
                    models.JSONField(
                        default=list,
                        help_text="Types de contenu préférés (ebook, audiobook, etc.)",
                    ),
                ),
                (
                    "preferred_book_length",
                    models.CharField(
                        choices=[
                            ("short", "Court (< 200 pages)"),
                            ("medium", "Moyen (200-400 pages)"),
                            ("long", "Long (> 400 pages)"),
                            ("any", "Peu importe"),
                        ],
                        default="any",
                        max_length=20,
                    ),
                ),
                (
                    "enable_recommendations",
                    models.BooleanField(
                        default=True,
                        help_text="Activer les recommandations personnalisées",
                    ),
                ),
                (
                    "recommendation_frequency",
                    models.CharField(
                        choices=[
                            ("daily", "Quotidien"),
                            ("weekly", "Hebdomadaire"),
                            ("monthly", "Mensuel"),
                        ],
                        default="weekly",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendation_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Profil utilisateur",
                "verbose_name_plural": "Profils utilisateurs",
                "db_table": "recommendation_user_profiles",
            },
        ),
        migrations.CreateModel(
            name="TrendingBook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "book_uuid",
                    models.UUIDField(help_text="UUID du livre dans catalog_service"),
                ),
                (
                    "book_title",
                    models.CharField(
                        help_text="Titre du livre (cache pour performance)",
                        max_length=500,
                    ),
                ),
                (
                    "trend_type",
                    models.CharField(
                        choices=[
                            ("daily", "Tendance du jour"),
                            ("weekly", "Tendance de la semaine"),
                            ("monthly", "Tendance du mois"),
                            ("rising", "En hausse"),
                            ("viral", "Viral"),
                            ("seasonal", "Saisonnier"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "trend_score",
                    models.FloatField(
                        help_text="Score de tendance",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "velocity",
                    models.FloatField(
                        default=0.0, help_text="Vitesse de croissance de la tendance"
                    ),
                ),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("download_count", models.PositiveIntegerField(default=0)),
                ("share_count", models.PositiveIntegerField(default=0)),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Livre en tendance",
                "verbose_name_plural": "Livres en tendance",
                "db_table": "recommendation_trending_books",
                "ordering": ["-trend_score"],
                "indexes": [
                    models.Index(
                        fields=["trend_type", "trend_score"],
                        name="recommendat_trend_t_ddb7a3_idx",
                    ),
                    models.Index(
                        fields=["period_start", "period_end"],
                        name="recommendat_period__7cf348_idx",
                    ),
                    models.Index(
                        fields=["velocity"], name="recommendat_velocit_51adc6_idx"
                    ),
                ],
                "unique_together": {("book_uuid", "trend_type", "period_start")},
            },
        ),
        migrations.CreateModel(
            name="SimilarityMatrix",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "book_a_uuid",
                    models.UUIDField(
                        help_text="UUID du premier livre dans catalog_service"
                    ),
                ),
                (
                    "book_a_title",
                    models.CharField(
                        help_text="Titre du premier livre (cache)", max_length=500
                    ),
                ),
                (
                    "book_b_uuid",
                    models.UUIDField(
                        help_text="UUID du deuxième livre dans catalog_service"
                    ),
                ),
                (
                    "book_b_title",
                    models.CharField(
                        help_text="Titre du deuxième livre (cache)", max_length=500
                    ),
                ),
                (
                    "content_similarity",
                    models.FloatField(
                        help_text="Similarité basée sur le contenu",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "genre_similarity",
                    models.FloatField(
                        help_text="Similarité basée sur les genres",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "author_similarity",
                    models.FloatField(
                        help_text="Similarité basée sur les auteurs",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "user_similarity",
                    models.FloatField(
                        help_text="Similarité basée sur les interactions utilisateurs",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "overall_similarity",
                    models.FloatField(
                        help_text="Score de similarité global",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("calculated_at", models.DateTimeField(auto_now=True)),
                ("algorithm_version", models.CharField(default="1.0", max_length=10)),
            ],
            options={
                "verbose_name": "Similarité entre livres",
                "verbose_name_plural": "Similarités entre livres",
                "db_table": "recommendation_similarity_matrix",
                "indexes": [
                    models.Index(
                        fields=["book_a_uuid", "overall_similarity"],
                        name="recommendat_book_a__606df8_idx",
                    ),
                    models.Index(
                        fields=["book_b_uuid", "overall_similarity"],
                        name="recommendat_book_b__c02f97_idx",
                    ),
                    models.Index(
                        fields=["overall_similarity"],
                        name="recommendat_overall_49655f_idx",
                    ),
                ],
                "unique_together": {("book_a_uuid", "book_b_uuid")},
            },
        ),
        migrations.CreateModel(
            name="RecommendationSet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "algorithm_type",
                    models.CharField(
                        choices=[
                            ("collaborative", "Filtrage collaboratif"),
                            ("content_based", "Basé sur le contenu"),
                            ("hybrid", "Hybride"),
                            ("popularity", "Popularité"),
                            ("trending", "Tendances"),
                            ("personalized", "Personnalisé"),
                            ("cold_start", "Démarrage à froid"),
                        ],
                        max_length=30,
                    ),
                ),
                ("algorithm_version", models.CharField(default="1.0", max_length=10)),
                (
                    "context",
                    models.JSONField(
                        default=dict,
                        help_text="Contexte de génération (page, recherche, etc.)",
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        default=dict, help_text="Paramètres utilisés pour la génération"
                    ),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="Date d'expiration des recommandations"
                    ),
                ),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("click_count", models.PositiveIntegerField(default=0)),
                ("conversion_count", models.PositiveIntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendation_sets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Ensemble de recommandations",
                "verbose_name_plural": "Ensembles de recommandations",
                "db_table": "recommendation_sets",
            },
        ),
        migrations.CreateModel(
            name="RecommendationFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feedback_type",
                    models.CharField(
                        choices=[
                            ("like", "J'aime"),
                            ("dislike", "Je n'aime pas"),
                            ("not_interested", "Pas intéressé"),
                            ("already_read", "Déjà lu"),
                            ("inappropriate", "Inapproprié"),
                            ("poor_quality", "Mauvaise qualité"),
                            ("good_recommendation", "Bonne recommandation"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Note de 1 à 5 pour la recommandation",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "comment",
                    models.TextField(blank=True, help_text="Commentaire optionnel"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "recommendation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedbacks",
                        to="recommendation_service.recommendation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendation_feedbacks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Feedback de recommandation",
                "verbose_name_plural": "Feedbacks de recommandations",
                "db_table": "recommendation_feedbacks",
            },
        ),
        migrations.AddField(
            model_name="recommendation",
            name="recommendation_set",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="recommendations",
                to="recommendation_service.recommendationset",
            ),
        ),
        migrations.CreateModel(
            name="BookVector",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "book_uuid",
                    models.UUIDField(
                        help_text="UUID du livre dans catalog_service", unique=True
                    ),
                ),
                (
                    "book_title",
                    models.CharField(
                        help_text="Titre du livre (cache pour performance)",
                        max_length=500,
                    ),
                ),
                (
                    "content_vector",
                    models.JSONField(help_text="Vecteur basé sur le contenu du livre"),
                ),
                (
                    "genre_vector",
                    models.JSONField(help_text="Vecteur basé sur les genres"),
                ),
                (
                    "author_vector",
                    models.JSONField(help_text="Vecteur basé sur l'auteur"),
                ),
                (
                    "metadata_vector",
                    models.JSONField(help_text="Vecteur basé sur les métadonnées"),
                ),
                (
                    "popularity_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "quality_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "recency_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("download_count", models.PositiveIntegerField(default=0)),
                (
                    "rating_average",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("rating_count", models.PositiveIntegerField(default=0)),
                (
                    "vector_version",
                    models.CharField(
                        default="1.0",
                        help_text="Version de l'algorithme de vectorisation",
                        max_length=10,
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Vecteur de livre",
                "verbose_name_plural": "Vecteurs de livres",
                "db_table": "recommendation_book_vectors",
                "indexes": [
                    models.Index(
                        fields=["popularity_score"],
                        name="recommendat_popular_e76432_idx",
                    ),
                    models.Index(
                        fields=["quality_score"], name="recommendat_quality_faddcf_idx"
                    ),
                    models.Index(
                        fields=["last_updated"], name="recommendat_last_up_ad5b01_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserInteraction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "book_uuid",
                    models.UUIDField(help_text="UUID du livre dans catalog_service"),
                ),
                (
                    "book_title",
                    models.CharField(
                        help_text="Titre du livre (cache pour performance)",
                        max_length=500,
                    ),
                ),
                (
                    "interaction_type",
                    models.CharField(
                        choices=[
                            ("view", "Consultation"),
                            ("download", "Téléchargement"),
                            ("read_start", "Début de lecture"),
                            ("read_progress", "Progression de lecture"),
                            ("read_complete", "Lecture terminée"),
                            ("bookmark", "Signet ajouté"),
                            ("rating", "Note donnée"),
                            ("share", "Partage"),
                            ("purchase", "Achat"),
                            ("wishlist", "Ajout à la liste de souhaits"),
                            ("search", "Recherche"),
                            ("recommendation_click", "Clic sur recommandation"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "session_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="ID de session pour grouper les interactions",
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("mobile", "Mobile"),
                            ("tablet", "Tablette"),
                            ("desktop", "Ordinateur"),
                            ("ereader", "Liseuse"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "interaction_value",
                    models.FloatField(
                        blank=True,
                        help_text="Valeur numérique de l'interaction (ex: note, pourcentage lu)",
                        null=True,
                    ),
                ),
                (
                    "interaction_metadata",
                    models.JSONField(
                        default=dict,
                        help_text="Métadonnées supplémentaires de l'interaction",
                    ),
                ),
                (
                    "from_recommendation",
                    models.BooleanField(
                        default=False,
                        help_text="Interaction issue d'une recommandation",
                    ),
                ),
                (
                    "recommendation_algorithm",
                    models.CharField(
                        blank=True,
                        help_text="Algorithme de recommandation utilisé",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "recommendation_score",
                    models.FloatField(
                        blank=True, help_text="Score de la recommandation", null=True
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Interaction utilisateur",
                "verbose_name_plural": "Interactions utilisateurs",
                "db_table": "recommendation_user_interactions",
                "indexes": [
                    models.Index(
                        fields=["user", "timestamp"],
                        name="recommendat_user_id_1b8345_idx",
                    ),
                    models.Index(
                        fields=["book_uuid", "interaction_type"],
                        name="recommendat_book_uu_a962bc_idx",
                    ),
                    models.Index(
                        fields=["session_id"], name="recommendat_session_fe2f13_idx"
                    ),
                    models.Index(
                        fields=["from_recommendation"],
                        name="recommendat_from_re_dbb388_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="recommendationset",
            index=models.Index(
                fields=["user", "generated_at"], name="recommendat_user_id_94cbbf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendationset",
            index=models.Index(
                fields=["algorithm_type"], name="recommendat_algorit_234f25_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendationset",
            index=models.Index(
                fields=["expires_at"], name="recommendat_expires_82dc41_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendationfeedback",
            index=models.Index(
                fields=["feedback_type"], name="recommendat_feedbac_1306f5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendationfeedback",
            index=models.Index(fields=["rating"], name="recommendat_rating_08cd46_idx"),
        ),
        migrations.AddIndex(
            model_name="recommendationfeedback",
            index=models.Index(
                fields=["created_at"], name="recommendat_created_0251e2_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="recommendationfeedback",
            unique_together={("user", "recommendation")},
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["recommendation_set", "position"],
                name="recommendat_recomme_3ab579_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(fields=["score"], name="recommendat_score_11d775_idx"),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["clicked"], name="recommendat_clicked_26211a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["converted"], name="recommendat_convert_eccf3a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="recommendation",
            unique_together={("recommendation_set", "book_uuid")},
        ),
    ]
