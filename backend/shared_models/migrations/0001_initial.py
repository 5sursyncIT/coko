# Generated by Django 4.2.7 on 2025-07-24 21:50

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="UserReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_uuid",
                    models.UUIDField(
                        help_text="UUID de l'utilisateur dans auth_service", unique=True
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Nom d'utilisateur", max_length=150, unique=True
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True, help_text="Nom d'affichage public", max_length=200
                    ),
                ),
                (
                    "service_source",
                    models.CharField(default="auth_service", max_length=50),
                ),
                ("last_sync", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Référence d'utilisateur",
                "verbose_name_plural": "Références d'utilisateurs",
                "db_table": "shared_user_references",
                "indexes": [
                    models.Index(
                        fields=["user_uuid"], name="shared_user_user_uu_b742cd_idx"
                    ),
                    models.Index(
                        fields=["username"], name="shared_user_usernam_548873_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="shared_user_is_acti_2d7079_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ServiceSync",
            fields=[
                (
                    "sync_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "source_service",
                    models.CharField(
                        help_text="Service source de la synchronisation", max_length=50
                    ),
                ),
                (
                    "target_service",
                    models.CharField(
                        help_text="Service cible de la synchronisation", max_length=50
                    ),
                ),
                (
                    "sync_type",
                    models.CharField(
                        choices=[
                            ("create", "Création"),
                            ("update", "Mise à jour"),
                            ("delete", "Suppression"),
                            ("full_sync", "Synchronisation complète"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "object_type",
                    models.CharField(
                        help_text="Type d'objet synchronisé (Book, Author, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "object_uuid",
                    models.UUIDField(help_text="UUID de l'objet synchronisé"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("in_progress", "En cours"),
                            ("completed", "Terminé"),
                            ("failed", "Échoué"),
                            ("conflict", "Conflit"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "sync_data",
                    models.JSONField(
                        default=dict, help_text="Données de synchronisation"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Message d'erreur en cas d'échec"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Synchronisation de service",
                "verbose_name_plural": "Synchronisations de services",
                "db_table": "shared_service_sync",
                "indexes": [
                    models.Index(
                        fields=["source_service", "target_service"],
                        name="shared_serv_source__175e9f_idx",
                    ),
                    models.Index(
                        fields=["object_type", "object_uuid"],
                        name="shared_serv_object__e672da_idx",
                    ),
                    models.Index(
                        fields=["status"], name="shared_serv_status_d74951_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="shared_serv_created_5bfd7a_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CrossServiceEvent",
            fields=[
                (
                    "event_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("book.created", "Livre créé"),
                            ("book.updated", "Livre mis à jour"),
                            ("book.deleted", "Livre supprimé"),
                            ("author.created", "Auteur créé"),
                            ("author.updated", "Auteur mis à jour"),
                            ("category.created", "Catégorie créée"),
                            ("user.created", "Utilisateur créé"),
                            ("user.updated", "Utilisateur mis à jour"),
                            ("reading.started", "Lecture commencée"),
                            ("reading.completed", "Lecture terminée"),
                            ("recommendation.generated", "Recommandation générée"),
                            ("recommendation.clicked", "Recommandation cliquée"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "event_version",
                    models.CharField(
                        default="1.0",
                        help_text="Version du schéma d'événement",
                        max_length=10,
                    ),
                ),
                (
                    "source_service",
                    models.CharField(
                        help_text="Service émetteur de l'événement", max_length=50
                    ),
                ),
                (
                    "target_services",
                    models.JSONField(
                        default=list, help_text="Liste des services cibles"
                    ),
                ),
                (
                    "event_data",
                    models.JSONField(default=dict, help_text="Données de l'événement"),
                ),
                (
                    "correlation_id",
                    models.UUIDField(
                        blank=True,
                        help_text="ID de corrélation pour tracer les événements liés",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("processing", "En traitement"),
                            ("processed", "Traité"),
                            ("failed", "Échoué"),
                            ("ignored", "Ignoré"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("retry_count", models.PositiveIntegerField(default=0)),
                ("max_retries", models.PositiveIntegerField(default=3)),
                ("next_retry_at", models.DateTimeField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                (
                    "processing_log",
                    models.JSONField(
                        default=list, help_text="Log des tentatives de traitement"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Événement inter-services",
                "verbose_name_plural": "Événements inter-services",
                "db_table": "shared_cross_service_events",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["event_type"], name="shared_cros_event_t_836d97_idx"
                    ),
                    models.Index(
                        fields=["source_service"], name="shared_cros_source__90c194_idx"
                    ),
                    models.Index(
                        fields=["status"], name="shared_cros_status_f63c43_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="shared_cros_created_daac23_idx"
                    ),
                    models.Index(
                        fields=["next_retry_at"], name="shared_cros_next_re_557f1d_idx"
                    ),
                    models.Index(
                        fields=["correlation_id"], name="shared_cros_correla_437400_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CategoryReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category_uuid",
                    models.UUIDField(
                        help_text="UUID de la catégorie dans catalog_service",
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Nom de la catégorie", max_length=200),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="Slug pour les URLs", max_length=200, unique=True
                    ),
                ),
                (
                    "parent_uuid",
                    models.UUIDField(
                        blank=True, help_text="UUID de la catégorie parente", null=True
                    ),
                ),
                (
                    "service_source",
                    models.CharField(default="catalog_service", max_length=50),
                ),
                ("last_sync", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Référence de catégorie",
                "verbose_name_plural": "Références de catégories",
                "db_table": "shared_category_references",
                "indexes": [
                    models.Index(
                        fields=["category_uuid"], name="shared_cate_categor_914703_idx"
                    ),
                    models.Index(fields=["slug"], name="shared_cate_slug_9e0690_idx"),
                    models.Index(
                        fields=["parent_uuid"], name="shared_cate_parent__7b8bab_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="shared_cate_is_acti_20b38a_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="BookReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "book_uuid",
                    models.UUIDField(
                        help_text="UUID du livre dans catalog_service", unique=True
                    ),
                ),
                ("title", models.CharField(help_text="Titre du livre", max_length=500)),
                (
                    "slug",
                    models.SlugField(
                        help_text="Slug pour les URLs", max_length=200, unique=True
                    ),
                ),
                (
                    "isbn",
                    models.CharField(
                        blank=True, help_text="ISBN du livre", max_length=20, null=True
                    ),
                ),
                (
                    "service_source",
                    models.CharField(
                        default="catalog_service",
                        help_text="Service source de cette référence",
                        max_length=50,
                    ),
                ),
                (
                    "last_sync",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Dernière synchronisation avec le service source",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Indique si le livre est toujours actif"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Référence de livre",
                "verbose_name_plural": "Références de livres",
                "db_table": "shared_book_references",
                "indexes": [
                    models.Index(
                        fields=["book_uuid"], name="shared_book_book_uu_dd727b_idx"
                    ),
                    models.Index(fields=["slug"], name="shared_book_slug_074e93_idx"),
                    models.Index(fields=["isbn"], name="shared_book_isbn_660858_idx"),
                    models.Index(
                        fields=["is_active"], name="shared_book_is_acti_e4763a_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AuthorReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "author_uuid",
                    models.UUIDField(
                        help_text="UUID de l'auteur dans catalog_service", unique=True
                    ),
                ),
                ("name", models.CharField(help_text="Nom de l'auteur", max_length=200)),
                (
                    "slug",
                    models.SlugField(
                        help_text="Slug pour les URLs", max_length=200, unique=True
                    ),
                ),
                (
                    "service_source",
                    models.CharField(default="catalog_service", max_length=50),
                ),
                ("last_sync", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Référence d'auteur",
                "verbose_name_plural": "Références d'auteurs",
                "db_table": "shared_author_references",
                "indexes": [
                    models.Index(
                        fields=["author_uuid"], name="shared_auth_author__39cc0c_idx"
                    ),
                    models.Index(fields=["slug"], name="shared_auth_slug_685105_idx"),
                    models.Index(
                        fields=["is_active"], name="shared_auth_is_acti_45ad4f_idx"
                    ),
                ],
            },
        ),
    ]
