# Configuration Kubernetes - Environnement Staging
# Projet Coko - Déploiement complet pour les tests d'acceptation

apiVersion: v1
kind: Namespace
metadata:
  name: coko-staging
  labels:
    environment: staging
    project: coko
    managed-by: kubernetes

---
# =============================================================================
# CONFIGMAPS ET SECRETS
# =============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: coko-config
  namespace: coko-staging
data:
  # Configuration générale
  ENVIRONMENT: "staging"
  LOG_LEVEL: "info"
  TZ: "Africa/Dakar"
  
  # URLs des services
  API_GATEWAY_URL: "https://api-staging.coko.africa"
  FRONTEND_URL: "https://staging.coko.africa"
  
  # Configuration Redis
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  # Configuration PostgreSQL
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  
  # Configuration Elasticsearch
  ELASTICSEARCH_URL: "http://elasticsearch-service:9200"
  
  # Configuration MinIO
  MINIO_ENDPOINT: "minio-service:9000"
  MINIO_BUCKET: "coko-staging"
  
  # Configuration RabbitMQ
  RABBITMQ_HOST: "rabbitmq-service"
  RABBITMQ_PORT: "5672"
  RABBITMQ_VHOST: "coko-staging"
  
  # Configuration monitoring
  JAEGER_ENDPOINT: "http://jaeger-collector:14268/api/traces"
  PROMETHEUS_URL: "http://prometheus:9090"

---
apiVersion: v1
kind: Secret
metadata:
  name: coko-secrets
  namespace: coko-staging
type: Opaque
data:
  # Secrets encodés en base64
  JWT_SECRET: c3RhZ2luZ19qd3Rfc2VjcmV0X3ZlcnlfbG9uZ19rZXlfMTIz
  POSTGRES_PASSWORD: c3RhZ2luZ19wYXNzd29yZF8xMjM=
  REDIS_PASSWORD: c3RhZ2luZ19yZWRpc18xMjM=
  MINIO_ACCESS_KEY: Y29rb19zdGFnaW5n
  MINIO_SECRET_KEY: c3RhZ2luZ19taW5pb18xMjM=
  RABBITMQ_PASSWORD: c3RhZ2luZ19yYWJiaXRfMTIz
  
  # Secrets des services externes
  ORANGE_MONEY_MERCHANT_KEY: c3RhZ2luZ19vcmFuZ2Vfa2V5
  WAVE_API_KEY: c3RhZ2luZ193YXZlX2tleQ==
  TWILIO_AUTH_TOKEN: c3RhZ2luZ190d2lsaW9fdG9rZW4=
  
  # Secrets de monitoring
  GRAFANA_ADMIN_PASSWORD: c3RhZ2luZ19ncmFmYW5hXzEyMw==

---
# =============================================================================
# PERSISTENT VOLUMES
# =============================================================================

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: coko-staging
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp3

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: coko-staging
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp3

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-pvc
  namespace: coko-staging
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 15Gi
  storageClassName: gp3

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: coko-staging
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: gp3

---
# =============================================================================
# BASES DE DONNÉES
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: coko-staging
  labels:
    app: postgres
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "coko_staging"
        - name: POSTGRES_USER
          value: "coko_staging"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_MULTIPLE_DATABASES
          value: "coko_auth,coko_catalog,coko_reading,coko_payment,coko_gamification,coko_community"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - coko_staging
            - -d
            - coko_staging
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - coko_staging
            - -d
            - coko_staging
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: coko-staging
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: coko-staging
  labels:
    app: redis
    tier: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: coko-staging
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# =============================================================================
# ELASTICSEARCH
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: coko-staging
  labels:
    app: elasticsearch
    tier: search
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
        tier: search
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
        - name: discovery.type
          value: "single-node"
        - name: xpack.security.enabled
          value: "false"
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        ports:
        - containerPort: 9200
        - containerPort: 9300
        volumeMounts:
        - name: elasticsearch-storage
          mountPath: /usr/share/elasticsearch/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: elasticsearch-storage
        persistentVolumeClaim:
          claimName: elasticsearch-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-service
  namespace: coko-staging
spec:
  selector:
    app: elasticsearch
  ports:
  - name: http
    port: 9200
    targetPort: 9200
  - name: transport
    port: 9300
    targetPort: 9300
  type: ClusterIP

---
# =============================================================================
# MINIO (STOCKAGE OBJETS)
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: coko-staging
  labels:
    app: minio
    tier: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
        tier: storage
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        command:
        - /bin/bash
        - -c
        args:
        - minio server /data --console-address :9001
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: MINIO_ACCESS_KEY
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: MINIO_SECRET_KEY
        ports:
        - containerPort: 9000
        - containerPort: 9001
        volumeMounts:
        - name: minio-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: coko-staging
spec:
  selector:
    app: minio
  ports:
  - name: api
    port: 9000
    targetPort: 9000
  - name: console
    port: 9001
    targetPort: 9001
  type: ClusterIP

---
# =============================================================================
# RABBITMQ
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: coko-staging
  labels:
    app: rabbitmq
    tier: messaging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
        tier: messaging
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management-alpine
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "coko_staging"
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: RABBITMQ_PASSWORD
        - name: RABBITMQ_DEFAULT_VHOST
          value: "coko-staging"
        ports:
        - containerPort: 5672
        - containerPort: 15672
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - -q
            - ping
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - -q
            - check_port_connectivity
          initialDelaySeconds: 20
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: coko-staging
spec:
  selector:
    app: rabbitmq
  ports:
  - name: amqp
    port: 5672
    targetPort: 5672
  - name: management
    port: 15672
    targetPort: 15672
  type: ClusterIP

---
# =============================================================================
# API GATEWAY
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: coko-staging
  labels:
    app: api-gateway
    tier: gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        tier: gateway
    spec:
      containers:
      - name: api-gateway
        image: ghcr.io/coko/api-gateway:staging
        env:
        - name: NODE_ENV
          value: "staging"
        - name: PORT
          value: "3000"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: JWT_SECRET
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: REDIS_PASSWORD
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: coko-config
              key: LOG_LEVEL
        - name: JAEGER_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: coko-config
              key: JAEGER_ENDPOINT
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: coko-staging
spec:
  selector:
    app: api-gateway
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# =============================================================================
# MICROSERVICES COKO
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: coko-staging
  labels:
    app: auth-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        tier: backend
    spec:
      containers:
      - name: auth-service
        image: ghcr.io/coko/auth:staging
        env:
        - name: GO_ENV
          value: "staging"
        - name: PORT
          value: "8001"
        - name: DATABASE_URL
          value: "postgres://coko_staging:$(POSTGRES_PASSWORD)@postgres-service:5432/coko_auth?sslmode=require"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: JWT_SECRET
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 8001
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: coko-staging
spec:
  selector:
    app: auth-service
  ports:
  - port: 8001
    targetPort: 8001
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-service
  namespace: coko-staging
  labels:
    app: catalog-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: catalog-service
  template:
    metadata:
      labels:
        app: catalog-service
        tier: backend
    spec:
      containers:
      - name: catalog-service
        image: ghcr.io/coko/catalog:staging
        env:
        - name: GO_ENV
          value: "staging"
        - name: PORT
          value: "8002"
        - name: DATABASE_URL
          value: "postgres://coko_staging:$(POSTGRES_PASSWORD)@postgres-service:5432/coko_catalog?sslmode=require"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: ELASTICSEARCH_URL
          valueFrom:
            configMapKeyRef:
              name: coko-config
              key: ELASTICSEARCH_URL
        - name: MINIO_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: coko-config
              key: MINIO_ENDPOINT
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: MINIO_SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: coko-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 8002
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: catalog-service
  namespace: coko-staging
spec:
  selector:
    app: catalog-service
  ports:
  - port: 8002
    targetPort: 8002
  type: ClusterIP

---
# =============================================================================
# INGRESS ET LOAD BALANCER
# =============================================================================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: coko-ingress
  namespace: coko-staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - staging.coko.africa
    - api-staging.coko.africa
    secretName: coko-staging-tls
  rules:
  - host: staging.coko.africa
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  - host: api-staging.coko.africa
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 3000

---
# =============================================================================
# HORIZONTAL POD AUTOSCALER
# =============================================================================

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: coko-staging
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-service-hpa
  namespace: coko-staging
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-service
  minReplicas: 2
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# =============================================================================
# NETWORK POLICIES
# =============================================================================

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coko-network-policy
  namespace: coko-staging
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          tier: gateway
  - from:
    - podSelector:
        matchLabels:
          tier: backend
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 9200
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - podSelector:
        matchLabels:
          tier: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          tier: cache
    ports:
    - protocol: TCP
      port: 6379

---
# =============================================================================
# MONITORING ET OBSERVABILITÉ
# =============================================================================

apiVersion: v1
kind: ServiceMonitor
metadata:
  name: coko-services
  namespace: coko-staging
  labels:
    app: coko
spec:
  selector:
    matchLabels:
      monitoring: "true"
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: coko-staging
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "coko_rules.yml"
    
    scrape_configs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - coko-staging
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__

---
# =============================================================================
# JOBS ET CRONJOBS
# =============================================================================

apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: coko-staging
spec:
  schedule: "0 2 * * *"  # Tous les jours à 2h du matin
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            command:
            - /bin/bash
            - -c
            - |
              pg_dumpall -h postgres-service -U coko_staging > /backup/backup-$(date +%Y%m%d-%H%M%S).sql
              aws s3 cp /backup/backup-$(date +%Y%m%d-%H%M%S).sql s3://coko-backups-staging/
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: coko-secrets
                  key: POSTGRES_PASSWORD
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
          volumes:
          - name: backup-storage
            emptyDir: {}
          restartPolicy: OnFailure

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleanup-logs
  namespace: coko-staging
spec:
  schedule: "0 1 * * 0"  # Tous les dimanches à 1h du matin
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: log-cleanup
            image: busybox:latest
            command:
            - /bin/sh
            - -c
            - |
              find /var/log -name "*.log" -mtime +7 -delete
              echo "Log cleanup completed"
            volumeMounts:
            - name: log-storage
              mountPath: /var/log
          volumes:
          - name: log-storage
            hostPath:
              path: /var/log
          restartPolicy: OnFailure

---
# =============================================================================
# RBAC ET SÉCURITÉ
# =============================================================================

apiVersion: v1
kind: ServiceAccount
metadata:
  name: coko-service-account
  namespace: coko-staging

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: coko-role
  namespace: coko-staging
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: coko-role-binding
  namespace: coko-staging
subjects:
- kind: ServiceAccount
  name: coko-service-account
  namespace: coko-staging
roleRef:
  kind: Role
  name: coko-role
  apiGroup: rbac.authorization.k8s.io

---
# =============================================================================
# POD DISRUPTION BUDGETS
# =============================================================================

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: coko-staging
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: api-gateway

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: auth-service-pdb
  namespace: coko-staging
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: auth-service

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: catalog-service-pdb
  namespace: coko-staging
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: catalog-service